// vite.config.js
// ‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ –¥–µ–ø–ª–æ—é –Ω–∞ GitHub Pages –ø—ñ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π /crm-project/
// - –∫–æ—Ä–µ–∫—Ç–Ω–∏–π base
// - –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
// - –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö HTML-–µ–Ω—Ç—Ä—ñ
// - —Å—Ç–∞–±—ñ–ª—å–Ω—ñ —ñ–º–µ–Ω—É–≤–∞–Ω–Ω—è asset-—ñ–≤ —ñ–∑ —Ö–µ—à–µ–º –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
// - PurgeCSS –≤–∏–Ω–µ—Å–µ–Ω–æ —É postcss.config.cjs (–Ω–µ –¥–æ–¥–∞—î–º–æ —è–∫ Vite-–ø–ª–∞–≥—ñ–Ω)

import path from 'path';
import { defineConfig } from 'vite';
import { fileURLToPath } from 'url';
import glob from 'fast-glob';
import { ViteImageOptimizer } from 'vite-plugin-image-optimizer';
import imagemin from 'imagemin';
import imageminWebp from 'imagemin-webp';

// üß© –§—ñ–∫—Å –¥–ª—è ESM: –≤–∏–∑–Ω–∞—á–∞—î–º–æ __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  // üîë –±–∞–∑–æ–≤–∏–π —à–ª—è—Ö –º–∞—î –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –Ω–∞–∑–≤—ñ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é –Ω–∞ GitHub Pages
  base: '/',

  plugins: [
    // ‚öôÔ∏è –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø—ñ–¥ —á–∞—Å –±—ñ–ª–¥—É
    ViteImageOptimizer({
      png: { quality: 86 },
      jpeg: { quality: 86 },
      jpg: { quality: 86 },
      webp: { quality: 86 },
      avif: { quality: 50 },
    }),

    // üß™ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è .webp —É DEV (–Ω–µ –±–ª–æ–∫—É—î –±—ñ–ª–¥)
    {
      name: 'dev-webp-generator',
      apply: 'serve',
      async buildStart() {
        await imagemin(['./src/img/**/*.{jpg,jpeg,png}'], {
          destination: './src/img/webp/',
          plugins: [imageminWebp({ quality: 86 })],
        });
      },
    },
  ],

  css: {
    // sourcemaps –∑—Ä—É—á–Ω–æ –¥–µ–±–∞–∂–∏—Ç–∏ —É dev, —É –ø—Ä–æ–¥—ñ Vite –≤–∏–º–∫–Ω–µ —Å–∞–º
    devSourcemap: true,
  },

  build: {
    // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º Vite –º—ñ–Ω—ñ–º—ñ–∑—É—î; –∑–∞–ª–∏—à–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç
    // minify: 'esbuild',
    emptyOutDir: true,
    rollupOptions: {
      // üîó –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫—ñ–ª—å–∫–æ—Ö HTML-—Å—Ç–æ—Ä—ñ–Ω–æ–∫
      input: Object.fromEntries(
        glob
          .sync(['./*.html', './pages/**/*.html'])
          .map((file) => [
            // –∫–ª—é—á ‚Äî –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
            path.relative(
              __dirname,
              file.slice(0, file.length - path.extname(file).length)
            ),
            // –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî –∞–±—Å–æ–ª—é—Ç–Ω–∏–π URL –¥–æ —Ñ–∞–π–ª—É
            fileURLToPath(new URL(file, import.meta.url)),
          ])
      ),
      output: {
        // üì¶ –Ü–º–µ–Ω—É–≤–∞–Ω–Ω—è asset-—ñ–≤ –∑ —Ö–µ—à–µ–º –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–µ—à—É–≤–∞–Ω–Ω—è –Ω–∞ Pages
        // (—ñ –±–µ–∑ –ø—ñ–¥–ø–∞–ø–∫–∏ dist —É —à–ª—è—Ö–∞—Ö)
        assetFileNames: (assetInfo) => {
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —è–∫ —î, –¥–æ–¥–∞—î–º–æ —Ö–µ—à
          // –ø—Ä–∏–∫–ª–∞–¥: assets/index-2a9f1d.css, assets/logo-3bd1a.svg
          return 'assets/[name]-[hash][extname]';
        },
        chunkFileNames: 'assets/[name]-[hash].js',
        entryFileNames: 'assets/[name]-[hash].js',
      },
    },
  },
});
